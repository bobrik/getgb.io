<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Faqs on gb - The project based build tool for Go</title>
    <link>http://localhost:1313/faq/</link>
    <description>Recent content in Faqs on gb - The project based build tool for Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/faq/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why didnâ€™t you contribute back to the go tool ?</title>
      <link>http://localhost:1313/faq/go-tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/faq/go-tool/</guid>
      <description>&lt;p&gt;The Go authors have stated that they&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why isn&#39;t there a gb run command ?</title>
      <link>http://localhost:1313/faq/gb-run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/faq/gb-run/</guid>
      <description>&lt;p&gt;gb is a project based tool. Every subcommand works on a list of import paths (packages) within that project, and most default to &amp;ldquo;all packages in the project&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;One of my frustrations with the go tool was its inconsistency in this manner, most go commands work on import paths, except for &lt;code&gt;go run&lt;/code&gt; which takes a file. Actually that&amp;rsquo;s not correct, &lt;code&gt;go run&lt;/code&gt; takes a list of files, but your chances of success of using it drops exponentially the more files you pass to &lt;code&gt;go run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While I recognise the utility of &lt;code&gt;go run&lt;/code&gt; for simple examples, and it&amp;rsquo;s a great way to introduce the language, the fact that it works allowed many new gophers to use it well past the point of its original intent and have a confusing and unsatisfactory time. When they ask for help, they have the double wammy that smug experienced gophers tell them &amp;ldquo;they are holding it wrong&amp;rdquo; and should learn to restructure their code.&lt;/p&gt;

&lt;p&gt;Because gb is focused on a project workflow, not a package or file workflow; most of the time you are building or testing your project (see digression in #49 ) I felt I could make things simpler and more consistent by not supporting &lt;code&gt;gb run&lt;/code&gt; at all.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/constabulary/gb/issues/51&#34;&gt;See also issue 51&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why not wrap the go tool ?</title>
      <link>http://localhost:1313/faq/why-not-wrap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/faq/why-not-wrap/</guid>
      <description>&lt;p&gt;I think the fact that gb does not just wrap the go tool is one if its distinguishing features.&lt;/p&gt;

&lt;p&gt;Technically there is nothing that gb does that couldn&amp;rsquo;t be done with a shell script. In fact several tools have been proposed over the last few years that do just this, with the exception of Keith Rarik&amp;rsquo;s godep, all have been completely overlooked by the market.&lt;/p&gt;

&lt;p&gt;Why is this? Well probably for one, Go programmers want to use tools written in Go. This seems like a bizarre statement, but it&amp;rsquo;s true, not just for Go programmers, but pretty much most programming communities.&lt;/p&gt;

&lt;p&gt;The second reason is, while you can construct an equivalent line of shell to mimick what gb does, generalising that with $PROJECT detection from you working directory and handling the case you may be several levels deep what was a one line shell script becomes a rather complicated shell script, which adds further weight to programmers not wanting to use a tool not written in their language. Then let&amp;rsquo;s talk about Windows compatibility &amp;hellip;&lt;/p&gt;

&lt;p&gt;I think there is also value in convention. I chose vendor/src arbitrarily because that&amp;rsquo;s what it was called in Rails. Without this convention people would use 3pp, external, etc, ie everyone would come up with their own naming convention, and suddenly your not talking one shell script, but one shell script per project, along with various configuration flags, etc.&lt;/p&gt;

&lt;p&gt;So, what does gb do ? Nothing that you couldn&amp;rsquo;t do by hand. But people don&amp;rsquo;t want to do things by hand, hence gb.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your project is crap! Why would you do this ?</title>
      <link>http://localhost:1313/faq/bugs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/faq/bugs/</guid>
      <description>&lt;p&gt;Thanks for the feedback.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>