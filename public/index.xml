<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gb - The project based build tool for Go</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on gb - The project based build tool for Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 May 2014 11:27:27 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting started</title>
      <link>http://localhost:1313/getting-started/</link>
      <pubDate>Wed, 07 May 2014 11:27:27 -0400</pubDate>
      
      <guid>http://localhost:1313/getting-started/</guid>
      <description>

&lt;h1 id=&#34;getting-started:b6885e1f85551f51a4707c402f8200a3&#34;&gt;Getting started&lt;/h1&gt;

&lt;p&gt;This document is a guide to introduce people to the &lt;code&gt;gb&lt;/code&gt; project structure. A &lt;code&gt;gb&lt;/code&gt; project is conceptually a &lt;code&gt;$GOPATH&lt;/code&gt; per project, but saying that doesn&amp;rsquo;t really help explain how to set up a new project; hence this document.&lt;/p&gt;

&lt;h1 id=&#34;creating-an-empty-project:b6885e1f85551f51a4707c402f8200a3&#34;&gt;Creating an empty project&lt;/h1&gt;

&lt;p&gt;A &lt;code&gt;gb&lt;/code&gt; project is defined as any directory that has a &lt;code&gt;src/&lt;/code&gt; subdirectory. The simplest possible &lt;code&gt;gb&lt;/code&gt; project would be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % mkdir -p ~/project/src/
 % cd ~/project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;~/project&lt;/code&gt; is therefore a &lt;code&gt;gb&lt;/code&gt; project.&lt;/p&gt;

&lt;p&gt;Source inside a &lt;code&gt;gb&lt;/code&gt; project follows the same rules as the &lt;code&gt;go&lt;/code&gt; tool, see the &lt;a href=&#34;https://golang.org/doc/code.html#Workspaces&#34;&gt;Workspaces section of the Go getting started document&lt;/a&gt;. All Go code goes in packages, and packages are subdirectories inside the project&amp;rsquo;s &lt;code&gt;src/&lt;/code&gt; directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % cd ~/project
 % mkdir -p src/cmd/helloworld
 % cat &amp;lt;&amp;lt;EOF &amp;gt; src/cmd/helloworld/helloworld.go
 package main

 import &amp;quot;fmt&amp;quot;

 func main() {
         fmt.Println(&amp;quot;Hello world&amp;quot;)
 }
 EOF
 % gb build cmd/helloworld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will build the small &lt;code&gt;helloworld&lt;/code&gt; command.&lt;/p&gt;

&lt;h1 id=&#34;converting-an-existing-project:b6885e1f85551f51a4707c402f8200a3&#34;&gt;Converting an existing project&lt;/h1&gt;

&lt;p&gt;This section shows how to construct a &lt;code&gt;gb&lt;/code&gt; project using existing code bases.&lt;/p&gt;

&lt;h2 id=&#34;simple-example:b6885e1f85551f51a4707c402f8200a3&#34;&gt;Simple example&lt;/h2&gt;

&lt;p&gt;In this example we&amp;rsquo;ll create a &lt;code&gt;gb&lt;/code&gt; project from the &lt;code&gt;github.com/pkg/sftp&lt;/code&gt; codebase.&lt;/p&gt;

&lt;p&gt;First, create a project,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % mkdir -p ~/devel/sftp
 % cd ~/devel/sftp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now checkout &lt;code&gt;github.com/pkg/sftp&lt;/code&gt; to the path it expects&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % mkdir -p src/github.com/pkg/sftp
 % git clone https://github.com/pkg/sftp src/github.com/pkg/sftp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let&amp;rsquo;s try to build this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % gb build all
 2015/04/29 13:39:44 INFO project root &amp;quot;/home/dfc/devel/sftp&amp;quot;
 2015/04/29 13:39:44 INFO build duration: 486.967µs map[]
 2015/04/29 13:39:44 command &amp;quot;build&amp;quot; failed: failed to resolve package &amp;quot;github.com/pkg/sftp&amp;quot;: cannot find package &amp;quot;github.com/kr/fs&amp;quot; in any of:
         /home/dfc/go/src/github.com/kr/fs (from $GOROOT)
         /home/dfc/devel/sftp/src/github.com/kr/fs (from $GOPATH)
         /home/dfc/devel/sftp/vendor/src/github.com/kr/fs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The build failed because the dependency, &lt;code&gt;github.com/kr/fs&lt;/code&gt; was not found in the project, which was expected (ignore the message about &lt;code&gt;$GOPATH&lt;/code&gt; this is a side effect of reusing the &lt;code&gt;go/build&lt;/code&gt; package for dependency resolution). So we can use the &lt;code&gt;gb vendor&lt;/code&gt; plugin to fetch the code for &lt;code&gt;github.com/kr/fs&lt;/code&gt;, and try again&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % gb vendor github.com/kr/fs
 2015/04/29 13:42:02 INFO project root &amp;quot;/home/dfc/devel/sftp&amp;quot;
 % gb build all                                                                                                                   
 2015/04/29 13:42:06 INFO project root &amp;quot;/home/dfc/devel/sftp&amp;quot;
 2015/04/29 13:42:06 INFO build duration: 701.994µs map[]
 2015/04/29 13:42:06 command &amp;quot;build&amp;quot; failed: failed to resolve package &amp;quot;github.com/pkg/sftp&amp;quot;: cannot find package &amp;quot;golang.org/x/crypto/ssh&amp;quot; in any of:
         /home/dfc/go/src/golang.org/x/crypto/ssh (from $GOROOT)
         /home/dfc/devel/sftp/src/golang.org/x/crypto/ssh (from $GOPATH)
         /home/dfc/devel/sftp/vendor/src/golang.org/x/crypto/ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nearly, there, just missing the &lt;code&gt;golang.org/x/crypto/ssh&lt;/code&gt; package, again we&amp;rsquo;ll use &lt;code&gt;gb vendor&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  % gb vendor golang.org/x/crypto/ssh
 2015/04/29 13:44:32 INFO project root &amp;quot;/home/dfc/devel/sftp&amp;quot;
  % gb build all                                                                                                                   
 2015/04/29 13:44:40 INFO project root &amp;quot;/home/dfc/devel/sftp&amp;quot;
 2015/04/29 13:44:40 INFO compile github.com/kr/fs [filesystem.go walk.go]
 2015/04/29 13:44:40 INFO compile golang.org/x/crypto/ssh [buffer.go certs.go channel.go cipher.go client.go client_auth.go common.go connection.go doc.go handshake.go kex.go keys.go mac.go messages.go mux.go server.go session.go tcpip.go transport.go]
 2015/04/29 13:44:40 INFO install compile {fs github.com/kr/fs /home/dfc/devel/sftp/vendor/src/github.com/kr/fs}
 2015/04/29 13:44:41 INFO install compile {ssh golang.org/x/crypto/ssh /home/dfc/devel/sftp/vendor/src/golang.org/x/crypto/ssh}
 2015/04/29 13:44:41 INFO compile golang.org/x/crypto/ssh/agent [client.go forward.go keyring.go server.go]
 2015/04/29 13:44:41 INFO compile github.com/pkg/sftp [attrs.go client.go packet.go release.go sftp.go]
 2015/04/29 13:44:42 INFO install compile {agent golang.org/x/crypto/ssh/agent /home/dfc/devel/sftp/vendor/src/golang.org/x/crypto/ssh/agent}
 2015/04/29 19:50:55 INFO compile github.com/pkg/sftp/examples/buffered-read-benchmark [main.go]
 2015/04/29 19:50:55 INFO compile github.com/pkg/sftp/examples/buffered-write-benchmark [main.go]
 2015/04/29 19:50:55 INFO compile github.com/pkg/sftp/examples/gsftp [main.go]
 2015/04/29 19:50:55 INFO compile github.com/pkg/sftp/examples/streaming-read-benchmark [main.go]
 2015/04/29 19:50:55 INFO compile github.com/pkg/sftp/examples/streaming-write-benchmark [main.go]
 2015/04/29 19:50:56 INFO link /home/dfc/devel/sftp/bin/buffered-read-benchmark [/tmp/gb786934546/github.com/pkg/sftp/examples/buffered-read-benchmark/main.a]
 2015/04/29 19:50:56 INFO link /home/dfc/devel/sftp/bin/gsftp [/tmp/gb786934546/github.com/pkg/sftp/examples/gsftp/main.a]
 2015/04/29 19:50:56 INFO link /home/dfc/devel/sftp/bin/streaming-read-benchmark [/tmp/gb786934546/github.com/pkg/sftp/examples/streaming-read-benchmark/main.a]
 2015/04/29 19:50:56 INFO link /home/dfc/devel/sftp/bin/streaming-write-benchmark [/tmp/gb786934546/github.com/pkg/sftp/examples/streaming-write-benchmark/main.a]
 2015/04/29 19:50:56 INFO link /home/dfc/devel/sftp/bin/buffered-write-benchmark [/tmp/gb786934546/github.com/pkg/sftp/examples/buffered-write-benchmark/main.a]
 2015/04/29 19:50:58 INFO build duration: 2.535541868s map[compile:1.895628229s link:9.827128875s]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now it builds. Some things to note&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The package name &lt;code&gt;all&lt;/code&gt; matches all the packages inside your project&amp;rsquo;s &lt;code&gt;src/&lt;/code&gt; directory. It&amp;rsquo;s a simple way to build everything, you can use other import paths and globs.&lt;/li&gt;
&lt;li&gt;There is no way to build your vendored source, it will be built if required to build your code in the &lt;code&gt;src/&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;more-complicated-example:b6885e1f85551f51a4707c402f8200a3&#34;&gt;More complicated example&lt;/h2&gt;

&lt;p&gt;For the second example we&amp;rsquo;ll take a project that uses &lt;code&gt;godep&lt;/code&gt; vendoring and convert it to be a &lt;code&gt;gb&lt;/code&gt; project. First we&amp;rsquo;ll need to setup a project and get the source&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % mkdir -p ~/devel/confd
 % cd ~/devel/confd
 % mkdir -p src/github.com/kelseyhightower/confd
 % git clone https://github.com/kelseyhightower/confd src/github.com/kelseyhightower/confd  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we know this project uses &lt;code&gt;godeps&lt;/code&gt;, so already includes all its dependencies, so we just need to rearrange things a bit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % mkdir -p vendor/src/
 % mv src/github.com/kelseyhightower/confd/Godeps/_workspace/src/* vendor/src/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see if it builds&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % gb build all
 2015/04/29 19:52:16 INFO project root &amp;quot;/home/dfc/devel/confd&amp;quot;
 2015/04/29 19:52:16 INFO compile github.com/kelseyhightower/confd [confd.go config.go node_var.go version.go]
 2015/04/29 19:52:16 INFO compile github.com/kelseyhightower/confd/integration/zookeeper [main.go]
 2015/04/29 19:52:16 INFO link /home/dfc/devel/confd/bin/zookeeper [/tmp/gb934182157/github.com/kelseyhightower/confd/integration/zookeeper/main.a]
 2015/04/29 19:52:16 INFO link /home/dfc/devel/confd/bin/confd [/tmp/gb934182157/github.com/kelseyhightower/confd/main.a]
 2015/04/29 19:52:17 INFO build duration: 1.7575955s map[compile:405.681764ms link:2.275663206s]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it does.&lt;/p&gt;

&lt;h1 id=&#34;wrapping-up:b6885e1f85551f51a4707c402f8200a3&#34;&gt;Wrapping up&lt;/h1&gt;

&lt;p&gt;Setting up, or converting code to a &lt;code&gt;gb&lt;/code&gt; project is simple. Once you&amp;rsquo;re done, just check the whole project into your source control.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Background</title>
      <link>http://localhost:1313/docs/background/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/background/</guid>
      <description>

&lt;h1 id=&#34;about-gb:b0476fd92f83c4d5358b679e38a0aca3&#34;&gt;About &lt;code&gt;gb&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;gb&lt;/code&gt; is a proof of concept replacement build tool for the &lt;a href=&#34;https://golang.org&#34;&gt;Go programming language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I gave a talk about &lt;code&gt;gb&lt;/code&gt; and the rational for its creation at GDG Berlin in April 2015, &lt;a href=&#34;https://www.youtube.com/watch?v=c3dW80eO88I&#34;&gt;video&lt;/a&gt; and &lt;a href=&#34;http://go-talks.appspot.com/github.com/davecheney/presentations/reproducible-builds.slide#1&#34;&gt;slides&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;project-based:b0476fd92f83c4d5358b679e38a0aca3&#34;&gt;Project based&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;gb&lt;/code&gt; operates on the concept of a project. A project has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A project is the consumer of your own source code, and possibly dependencies that your code consumes; nothing consumes the code from a project. Another way of thinking about it is, a project is where package &lt;code&gt;main&lt;/code&gt; is.&lt;/li&gt;
&lt;li&gt;A project is conceptually a &lt;code&gt;$GOPATH&lt;/code&gt; workspace dedicated to your project&amp;rsquo;s code.&lt;/li&gt;
&lt;li&gt;A project supports multiple locations for source code, at the moment &lt;code&gt;src/&lt;/code&gt; for your source code, and &lt;code&gt;vendor/src/&lt;/code&gt; for third party code that you have copied, cloned, forked, or otherwise included in the project.&lt;/li&gt;
&lt;li&gt;The code that represents an &lt;code&gt;import&lt;/code&gt; path is controlled by the project, by virtue of being present in one of the source code directories in the project.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>http://localhost:1313/docs/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/install/</guid>
      <description>

&lt;h1 id=&#34;installation:ee40007639ba1d9861b5cc3e7ade0aef&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;This page will help you install &lt;em&gt;gb&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites:ee40007639ba1d9861b5cc3e7ade0aef&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;gb&lt;/em&gt; is compatible with Go 1.4. If you haven&amp;rsquo;t installed Go yet, we recommmend using the binary installers available from the &lt;a href=&#34;http://golang.org/doc/install#install&#34;&gt;office Go website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation-1:ee40007639ba1d9861b5cc3e7ade0aef&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;gb&lt;/em&gt; can be installed with the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/constabulary/gb/...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;keeping-up-to-date:ee40007639ba1d9861b5cc3e7ade0aef&#34;&gt;Keeping up to date&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;gb&lt;/em&gt; is under active development, you can upgrade your &lt;em&gt;gb&lt;/em&gt; installation to the latest with the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u github.com/constabulary/gb/...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next-up:ee40007639ba1d9861b5cc3e7ade0aef&#34;&gt;Next Up&lt;/h2&gt;

&lt;p&gt;Now you&amp;rsquo;ve installed &lt;em&gt;gb&lt;/em&gt;, move on to &lt;a href=&#34;http://localhost:1313/docs/project&#34;&gt;setting up your project&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About gb</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      <description>

&lt;h1 id=&#34;about-gb:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;About &lt;code&gt;gb&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;gb&lt;/code&gt; is a proof of concept replacement build tool for the &lt;a href=&#34;https://golang.org&#34;&gt;Go programming language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/docs/background&#34;&gt;Read more about the history of gb&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;project-based:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Project based&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;gb&lt;/code&gt; operates on the concept of a project. A project has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A project is the consumer of your own source code, and possibly dependencies that your code consumes; nothing consumes the code from a project. Another way of thinking about it is, a project is where package &lt;code&gt;main&lt;/code&gt; is.&lt;/li&gt;
&lt;li&gt;A project is a workspace dedicated to your project&amp;rsquo;s code.&lt;/li&gt;
&lt;li&gt;A project supports multiple locations for source code, at the moment &lt;code&gt;src/&lt;/code&gt; for your source code, and &lt;code&gt;vendor/src/&lt;/code&gt; for third party code that you have copied, cloned, forked, or otherwise included in the project.&lt;/li&gt;
&lt;li&gt;The code that represents an &lt;code&gt;import&lt;/code&gt; path is controlled by the project, by virtue of being present in one of the source code directories in the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/docs/project&#34;&gt;Read more about setting up a gb project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Installing, or upgrading &lt;em&gt;gb&lt;/em&gt; is super simple (assuming you&amp;rsquo;ve already got Go installed)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/constabulary/gb/...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/docs/install&#34;&gt;Read more about installing and using gb&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;next-up:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Next up&lt;/h2&gt;

&lt;p&gt;Now you&amp;rsquo;ve got gb installed, move on the to &lt;a href=&#34;http://localhost:1313/docs/project&#34;&gt;setting up a gb project&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Editor support</title>
      <link>http://localhost:1313/docs/editors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/editors/</guid>
      <description>

&lt;h1 id=&#34;editor-support:1ad680f00cfb747afb5bde284957f8f2&#34;&gt;Editor support&lt;/h1&gt;

&lt;p&gt;TODO(dfc) document how to configure popular editors and IDEs to support gb projects.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project</title>
      <link>http://localhost:1313/docs/project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/project/</guid>
      <description>

&lt;h1 id=&#34;projects:10be9c81b9315bdc8704629d17642664&#34;&gt;Projects&lt;/h1&gt;

&lt;p&gt;A &lt;b&gt;gb&lt;/b&gt; project is a workspace for all the Go code that is required to build your project.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;gb&lt;/code&gt; project is a folder on disk that contains a subdirectory named &lt;code&gt;src/&lt;/code&gt;. That&amp;rsquo;s it, no environment variables to set. For the rest of this document we&amp;rsquo;ll refer to your &lt;code&gt;gb&lt;/code&gt; project as &lt;code&gt;$PROJECT&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;your-stuff-their-stuff:10be9c81b9315bdc8704629d17642664&#34;&gt;Your stuff, their stuff&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;gb&lt;/b&gt; projects differentiate between &lt;em&gt;your stuff&lt;/em&gt;, the code you&amp;rsquo;ve written, and &lt;em&gt;their stuff&lt;/em&gt;, the code that your code depends on. We call &lt;em&gt;their stuff&lt;/em&gt; vendored code.&lt;/p&gt;

&lt;p&gt;Inside a &lt;em&gt;gb&lt;/em&gt; project &lt;em&gt;your stuff&lt;/em&gt;, the source code of your project goes in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$PROJECT/src/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The source code that others&amp;rsquo; have written, &lt;em&gt;their stuff&lt;/em&gt;, goes in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$PROJECT/vendor/src/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;gb&lt;/em&gt; makes a distinction between your code and vendored code. &lt;em&gt;gb&lt;/em&gt; can build and test your code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>http://localhost:1313/docs/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/tools/</guid>
      <description>

&lt;h1 id=&#34;tool-suoport:392b1cfe5865fa09a3eb545085be9682&#34;&gt;Tool suoport&lt;/h1&gt;

&lt;p&gt;TODO(dfc) document how to use tools like goimports and the go oracle with gb projects.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Usage</title>
      <link>http://localhost:1313/docs/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/usage/</guid>
      <description>

&lt;h1 id=&#34;usage:dc32fe45042973266ca60588597e0b66&#34;&gt;Usage&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;gb&lt;/code&gt; is the main command. It supports subcommands, of which there are currently two:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; - which builds your code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt; - which behaves identically to &lt;code&gt;gb build&lt;/code&gt;, but runs tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;project-root-auto-detection:dc32fe45042973266ca60588597e0b66&#34;&gt;Project root auto detection&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;gb&lt;/em&gt; automatically detects your project&amp;rsquo;s root directory based on your current working directory.&lt;/p&gt;

&lt;p&gt;A gb project is defined as any directory that contains a &lt;code&gt;src/&lt;/code&gt; subdirectory. gb automatically detects the root of the project by looking at the current working directory and walking backwards until it finds a directory that contains a &lt;code&gt;src/&lt;/code&gt; subdirectory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/docs/project&#34;&gt;Read more about managing gb projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the event you wish to override this autodetection mechanism, the &lt;code&gt;-R&lt;/code&gt; flag can be used to supply a project root.&lt;/p&gt;

&lt;h2 id=&#34;arguments:dc32fe45042973266ca60588597e0b66&#34;&gt;Arguments&lt;/h2&gt;

&lt;p&gt;Arguments to &lt;code&gt;gb&lt;/code&gt; subcommands are package import paths or globs relative to the project &lt;code&gt;src/&lt;/code&gt; directory&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gb build github.com/a/b&lt;/code&gt; - builds &lt;code&gt;github.com/a/b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gb build github.com/a/b/...&lt;/code&gt; - builds &lt;code&gt;github.com/a/b&lt;/code&gt; and all packages below it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gb build .../cmd/...&lt;/code&gt; - builds anything that matches &lt;code&gt;.*/cmd/.*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gb build&lt;/code&gt; - shorthand for &lt;code&gt;go build ...&lt;/code&gt;, depending on the current working directory this will be the entire project, or a subtree.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other subcommands, like &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;vendor&lt;/code&gt;, etc follow the same rule.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;note&lt;/em&gt;: only import paths within the &lt;code&gt;src/&lt;/code&gt; directory will match, it is not possible to build source from the &lt;code&gt;vendor/src/&lt;/code&gt; directory; it will be built if needed by virtue of being imported by a package in the &lt;code&gt;src/&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2 id=&#34;incremental-compilation:dc32fe45042973266ca60588597e0b66&#34;&gt;Incremental compilation&lt;/h2&gt;

&lt;p&gt;By default &lt;code&gt;gb&lt;/code&gt; always performs incremental compilation and caches the results in &lt;code&gt;$PROJECT/pkg/&lt;/code&gt;. See the Flags section for options to alter this behaviour.&lt;/p&gt;

&lt;h2 id=&#34;flags:dc32fe45042973266ca60588597e0b66&#34;&gt;Flags&lt;/h2&gt;

&lt;p&gt;The following flags are supported by &lt;code&gt;gb&lt;/code&gt;. Note that these are flags to subcommands, so must come &lt;em&gt;after&lt;/em&gt; the subcommand.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-R&lt;/code&gt; - sets the base of the project root search path from the current working directory to the value supplied. Effectively &lt;code&gt;gb&lt;/code&gt; changes working directory to this path before searching for the project root.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt; - increases verbosity, effectively lowering the output level from INFO to DEBUG.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-q&lt;/code&gt; - decreases verbosity, effectively raising the output level to ERROR. In a successful build, no output will be displayed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-goroot&lt;/code&gt; - alters the path to the go toolchain in use, eg &lt;code&gt;gb build -goroot=$HOME/go1.4&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-goos&lt;/code&gt;, &lt;code&gt;-goarch&lt;/code&gt; - analogous to &lt;code&gt;env GOOS=... GOARCH=... gb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt; - ignore cached packages if present, new packages built will overwrite any cached packages. This effectively disables incremental compilation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-F&lt;/code&gt; - do not cache packages, cached packages will still be used for incremental compilation, &lt;code&gt;-f -F&lt;/code&gt; is advised to disable the package caching system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;next-up:dc32fe45042973266ca60588597e0b66&#34;&gt;Next Up&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;gb&lt;/code&gt; supports git style plugins which can be used to extend its functionality. &lt;a href=&#34;http://localhost:1313/plugins&#34;&gt;Read more about plugins&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your project is crap! Why would you do this ?</title>
      <link>http://localhost:1313/faq/bugs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/faq/bugs/</guid>
      <description>&lt;p&gt;Thanks for the feedback.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why isn&#39;t there a gb run command ?</title>
      <link>http://localhost:1313/faq/gb-run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/faq/gb-run/</guid>
      <description>&lt;p&gt;gb is a project based tool. Every subcommand works on a list of import paths (packages) within that project, and most default to &amp;ldquo;all packages in the project&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;One of my frustrations with the go tool was its inconsistency in this manner, most go commands work on import paths, except for &lt;code&gt;go run&lt;/code&gt; which takes a file. Actually that&amp;rsquo;s not correct, &lt;code&gt;go run&lt;/code&gt; takes a list of files, but your chances of success of using it drops exponentially the more files you pass to &lt;code&gt;go run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While I recognise the utility of &lt;code&gt;go run&lt;/code&gt; for simple examples, and it&amp;rsquo;s a great way to introduce the language, the fact that it works allowed many new gophers to use it well past the point of its original intent and have a confusing and unsatisfactory time. When they ask for help, they have the double wammy that smug experienced gophers tell them &amp;ldquo;they are holding it wrong&amp;rdquo; and should learn to restructure their code.&lt;/p&gt;

&lt;p&gt;Because gb is focused on a project workflow, not a package or file workflow; most of the time you are building or testing your project (see digression in #49 ) I felt I could make things simpler and more consistent by not supporting &lt;code&gt;gb run&lt;/code&gt; at all.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/constabulary/gb/issues/51&#34;&gt;See also issue 51&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why didn’t you contribute back to the go tool ?</title>
      <link>http://localhost:1313/faq/go-tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/faq/go-tool/</guid>
      <description>&lt;p&gt;The Go authors have stated that they&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why not wrap the go tool ?</title>
      <link>http://localhost:1313/faq/why-not-wrap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/faq/why-not-wrap/</guid>
      <description>&lt;p&gt;I think the fact that gb does not just wrap the go tool is one if its distinguishing features.&lt;/p&gt;

&lt;p&gt;Technically there is nothing that gb does that couldn&amp;rsquo;t be done with a shell script. In fact several tools have been proposed over the last few years that do just this, with the exception of Keith Rarik&amp;rsquo;s godep, all have been completely overlooked by the market.&lt;/p&gt;

&lt;p&gt;Why is this? Well probably for one, Go programmers want to use tools written in Go. This seems like a bizarre statement, but it&amp;rsquo;s true, not just for Go programmers, but pretty much most programming communities.&lt;/p&gt;

&lt;p&gt;The second reason is, while you can construct an equivalent line of shell to mimick what gb does, generalising that with $PROJECT detection from you working directory and handling the case you may be several levels deep what was a one line shell script becomes a rather complicated shell script, which adds further weight to programmers not wanting to use a tool not written in their language. Then let&amp;rsquo;s talk about Windows compatibility &amp;hellip;&lt;/p&gt;

&lt;p&gt;I think there is also value in convention. I chose vendor/src arbitrarily because that&amp;rsquo;s what it was called in Rails. Without this convention people would use 3pp, external, etc, ie everyone would come up with their own naming convention, and suddenly your not talking one shell script, but one shell script per project, along with various configuration flags, etc.&lt;/p&gt;

&lt;p&gt;So, what does gb do ? Nothing that you couldn&amp;rsquo;t do by hand. But people don&amp;rsquo;t want to do things by hand, hence gb.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gb-env</title>
      <link>http://localhost:1313/plugins/gb-env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/plugins/gb-env/</guid>
      <description>

&lt;h1 id=&#34;gb-env-plugin:dce8d8196755a958a05fdaa0a0d104cd&#34;&gt;gb-env plugin&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;gb-env&lt;/code&gt; is a simple plugin useful for debugging the environment passed to a &lt;code&gt;gb&lt;/code&gt; plugin.&lt;/p&gt;

&lt;p&gt;Tranditionally all environment variables in this set begin with &lt;code&gt;GB_&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/plugins/</guid>
      <description>

&lt;h1 id=&#34;plugins:dce8ed91d073f65a191aa58c2338afcb&#34;&gt;Plugins&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;gb&lt;/code&gt; supports git style plugins.&lt;/p&gt;

&lt;p&gt;Anything in &lt;code&gt;$PATH&lt;/code&gt; that starts with &lt;code&gt;gb-&lt;/code&gt; is considered a plugin. Plugins are executed from the main &lt;code&gt;gb&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;At the moment there are two plugins shipped with &lt;code&gt;gb&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/plugins/gb-env&#34;&gt;&lt;code&gt;env&lt;/code&gt;&lt;/a&gt; - analogous to &lt;code&gt;go env&lt;/code&gt;, useful for debugging the environment passed to a &lt;code&gt;gb&lt;/code&gt; plugin, tranditionally all environment variables in this set begin with &lt;code&gt;GB_&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/plugins/gb-vendor&#34;&gt;&lt;code&gt;vendor&lt;/code&gt;&lt;/a&gt; - is a simple wrapper around &lt;code&gt;go get&lt;/code&gt; to allow easy bootstrapping of a project by fetching dependencies in to the &lt;code&gt;vendor/src/&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/why/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/why/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;Repeatable builds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have a requirement that at any time I can fetch the entire graph of source that went into a program, feed that to a compiler and produce a program that is identical to one created in the past.&lt;/p&gt;

&lt;p&gt;This is the requirement I have, and this is the motivation for this talk. If you don&amp;rsquo;t have this requirement, that&amp;rsquo;s fine.&lt;/p&gt;

&lt;p&gt;The plethora of tools that exist in this space shows that Go programmers have multiple, sometimes overlapping requirements. Again, that is fine, this is my solution for my requirements; it is my &lt;em&gt;hope&lt;/em&gt; that I can convince you of it&amp;rsquo;s utility to you, but again, if you don&amp;rsquo;t share my requirements, I may not be successful in my arguments.&lt;/p&gt;

&lt;p&gt;Out of scope&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;compiler doesn&amp;rsquo;t produce byte for byte comparable binaries&lt;/li&gt;

&lt;li&gt;&lt;p&gt;archiving compiler tool chain versions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Why I don&amp;rsquo;t have a reliable builds today&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK, so now I&amp;rsquo;ve told you what I want; I need to explain to you why I don&amp;rsquo;t feel that I have it today.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; import &amp;quot;github.com/pkg/sftp&amp;quot;  # yes, but which revision!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most obvious reason is the import statement inside a Go package does not provide enough information for &lt;code&gt;go&lt;/code&gt;get` to select from a set of revisions available in a remote code repository the specific revision to fetch.&lt;/p&gt;

&lt;p&gt;That information simply isn&amp;rsquo;t there.&lt;/p&gt;

&lt;h2 id=&#34;naming-things:50154871feb7734a0c128eea6d4c994c&#34;&gt;Naming things&lt;/h2&gt;

&lt;p&gt;There are two rules for successful dependency management in Go.&lt;/p&gt;

&lt;h3 id=&#34;rule-1-things-that-are-different-must-have-different-import-paths:50154871feb7734a0c128eea6d4c994c&#34;&gt;Rule 1: Things that are different &lt;em&gt;must&lt;/em&gt; have different import paths.&lt;/h3&gt;

&lt;p&gt;Who has written a log or logger package, they might all be called &amp;ldquo;log&amp;rdquo;, but they are not the same package.&lt;/p&gt;

&lt;p&gt;This why we have namespaces, &lt;code&gt;github.com/you/log&lt;/code&gt;, &lt;code&gt;github.com/me/log&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;naming-things-part-2:50154871feb7734a0c128eea6d4c994c&#34;&gt;Naming things (part 2)&lt;/h3&gt;

&lt;p&gt;Rule 2: Things that are the same &lt;em&gt;must&lt;/em&gt; have the same import path.&lt;/p&gt;

&lt;p&gt;Are these two packages the same, or are they different ?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; github.com/lib/pq
 github.com/davecheney/foo/internal/github.com/lib/pq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They are the same, this is the same code &amp;ndash; this is obvious to a human, not a computer.&lt;/p&gt;

&lt;p&gt;To a compiler these are different packages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type assertions and equality are broken.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;init()&lt;/code&gt; functions will run multiple times. [[&lt;a href=&#34;http://godoc.org/database/sql#Register][database/sql.Register]&#34;&gt;http://godoc.org/database/sql#Register][database/sql.Register]&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The import statement cannot be changed&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We cannot add anything to the import syntax for two reasons&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/pkg/term&amp;quot; &amp;quot;{hash,tag,version}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Imports are opaque to the language, so some external tool dictating the format of the import declaration to the compiler is not appropriate.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;More importantly, this would be a backward incompatible syntax change.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Versions in the URL (part 1)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We cannot embed anything in the import syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/project/v7/library&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Popular if you want to provide multiple versions of your API at the same time.&lt;/li&gt;
&lt;li&gt;Not accurate enough to checkout a specific revision.&lt;/li&gt;
&lt;li&gt;Not reproducible to ensure everyone has the &lt;em&gt;same&lt;/em&gt; revision.&lt;/li&gt;
&lt;li&gt;Every import statement in every file in the package &lt;em&gt;must&lt;/em&gt; be identical, even using build tags, even using conditional compilation.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Breaks the rule of naming things, two things which are the same, must have the same import path.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Versions in the URL (part 2)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Leads to nightmarish scenarios where equality and type assertions are broken.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/project/v9/lib&amp;quot; // registers itself as a dialer
import &amp;quot;github.com/project/dialer&amp;quot;

err := dialer.Dial(&amp;quot;someurl&amp;quot;)
fmt.Println(err == lib.ErrTimeout) =&amp;gt; false
fmt.Printf(&amp;quot;%T&amp;quot;, err) =&amp;gt; &amp;quot;lib.ErrTimeout&amp;quot;
fmt.Println(v7/lib.ErrTimeout == v9/lib.ErrTimeout) =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Competitive Analysis&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dude, be a good Gopher, don&amp;rsquo;t break users&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the first, and longest standing solution to this problem is to always have a stable API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proposed solution from the Go team for several years.&lt;/li&gt;
&lt;li&gt;Admirable attempt to extend the Go 1 contract to all Go code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it worked, we wouldn&amp;rsquo;t be having this conversation today&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You &lt;em&gt;want&lt;/em&gt; to change the API for your package&lt;/li&gt;
&lt;li&gt;Often the API and the consumer evolve in parallel&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Even putting versions in the import path only guarantees I have &lt;em&gt;a&lt;/em&gt; version of that package, not &lt;em&gt;the&lt;/em&gt; version.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I live in the real world&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If my time in system administration taught me anything, it&amp;rsquo;s the unexpected failures that get you. You can plan for the big disasters, but it turns out that the little disasters can be just as disruptive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code.google.com closing down. Will Github still be around in 10 years ?&lt;/li&gt;
&lt;li&gt;codehaus :(&lt;/li&gt;
&lt;li&gt;companies merging, people getting married, someone dies, trademark dispute, etc.&lt;/li&gt;
&lt;li&gt;FoundationDB :(&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are all little disasters, you can usually find the code again, maybe it&amp;rsquo;s just a quick sed rewrite and you&amp;rsquo;re back again.&lt;/p&gt;

&lt;p&gt;But just like the big disasters, these little disasters are indistinguishable, code which built one day, won&amp;rsquo;t build the next.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t be this person&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.image reproducible-builds/github.png&lt;/p&gt;

&lt;p&gt;The moral of the story is, if you are responsible for delivering a product written in Go, you need to be responsible for all the source that goes into that product.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tools which manage $GOPATH&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tools which fixup &lt;code&gt;$GOPATH&lt;/code&gt; after &lt;code&gt;go&lt;/code&gt;get`&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;godeps (plural, canonical)&lt;/li&gt;
&lt;li&gt;glock&lt;/li&gt;
&lt;li&gt;gvp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Problems&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;not reproducible, the upstream can still disappear&lt;/li&gt;
&lt;li&gt;must adjust your &lt;code&gt;$GOPATH&lt;/code&gt; manually when moving between projects&lt;/li&gt;
&lt;li&gt;near universal dislike for a .lock file in the package&lt;/li&gt;

&lt;li&gt;&lt;p&gt;universal disagreement on the format and layout of a .lock file&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tools which vendor packages&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Copying, vendoring, rewriting the source, is the &lt;em&gt;new&lt;/em&gt; position from the Go team.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;godep&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Problems&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;requires source rewriting; many uncomfortable with this&lt;/li&gt;
&lt;li&gt;possibly breaks the naming rules; the same package can exist in the dependency graph under multiple names&lt;/li&gt;
&lt;li&gt;concerns about losing track of the upstream&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ugly long import lines&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tools which give you one $GOPATH per project&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Virtual env all the things!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpm &lt;a href=&#34;https://github.com/pote/gpm&#34;&gt;https://github.com/pote/gpm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gvm&lt;/li&gt;
&lt;li&gt;govm&lt;/li&gt;
&lt;li&gt;glide&lt;/li&gt;
&lt;li&gt;/usr/bin/direnv (old skool)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Problems&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;not isolated from upstream going away&lt;/li&gt;

&lt;li&gt;&lt;p&gt;hard to use, terminal or shell session becomes magic&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Proposal&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Stop working around go get&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.image reproducible-builds/goget.jpg _ 400&lt;/p&gt;

&lt;p&gt;Every one of the existing solutions is hamstrung by the fact it is working around the limitations of the &lt;code&gt;go&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;Stop using &lt;code&gt;go&lt;/code&gt;get&lt;code&gt;. Don&#39;t use the&lt;/code&gt;go` tool at all.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, we&amp;rsquo;re talking about writing a new build tool for Go, not a wrapper around an existing tool.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project based&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A new build tool should be project based.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A project is where main packages live.&lt;/li&gt;
&lt;li&gt;A project is effectively a single $GOPATH.&lt;/li&gt;
&lt;li&gt;Automatic detection, you don&amp;rsquo;t need &amp;lsquo;enter&amp;rsquo; a project.&lt;/li&gt;
&lt;li&gt;The owner of the project decides on the version of a particular import path in use.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Never more than one copy of a single import per project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;No configuration files&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This one I find hard to accept, but Go developers do not want to have any sort of configuration file to build their code.&lt;/p&gt;

&lt;p&gt;I find this hard to rationalize because most repos that I look have had dozens of turds in them, Gruntfiles, Dockerfiles, Werker configs, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Projects are detected from the path, anything that has a &lt;code&gt;src&lt;/code&gt; in the path is a project.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Works well in practice, and is backwards compatible with &lt;code&gt;$GOPATH&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Respect the canonical import path&lt;/p&gt;

&lt;p&gt;package pdf // import &amp;ldquo;rsc.io/pdf&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;rsc added this, it&amp;rsquo;s clear what he thinks about the possibility of duplicates in the binary&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Import rewriting has to rewrite the import comment as well, and that sounds like deliberately disabling the safety interlock on a handgun.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Leaves source untouched&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the whole source in&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use submodules or subtrees, svn externals, etc, if you prefer&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t touch the source, then you stand a chance of hashing it / diffing it / signing it&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Annoying things&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we&amp;rsquo;re going to go the extreme of divorcing ourselves from the &lt;code&gt;go&lt;/code&gt; tool then maybe we can fix a few other annoyances along the way&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-tags&lt;/code&gt;something` now just works&lt;/li&gt;
&lt;li&gt;deleting a file from a package, causes a rebuild&lt;/li&gt;
&lt;li&gt;deleting a package&amp;rsquo;s source, we won&amp;rsquo;t use the stale .a in ~/pkg&lt;/li&gt;

&lt;li&gt;&lt;p&gt;not restricted to &lt;code&gt;go&lt;/code&gt;get` ideas of correct DVCS usage, ie, can use ssh://github.com/&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Introducing gb&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.image reproducible-builds/gb.jpg _ 350&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% /usr/bin/gb
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Proof of concept&lt;/li&gt;
&lt;li&gt;Project based, project is automatically detected&lt;/li&gt;
&lt;li&gt;Dependencies are a property of the project, one copy of any package per project&lt;/li&gt;
&lt;li&gt;Supports vendoring without rewriting via multiple src/ directories&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Supports plugins (git style)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Demo time&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;this-only-works-for-projects-what-about-packages:50154871feb7734a0c128eea6d4c994c&#34;&gt;* This only works for projects, what about packages ?&lt;/h1&gt;

&lt;h1 id=&#34;yes-this-solution-works-for-projects-it-encourages-you-to-build-larger-projects:50154871feb7734a0c128eea6d4c994c&#34;&gt;Yes, this solution works for projects, it encourages you to build larger projects.&lt;/h1&gt;

&lt;h1 id=&#34;personally-i-think-this-is-what-go-needs-at-the-moment:50154871feb7734a0c128eea6d4c994c&#34;&gt;Personally, I think this is what Go needs at the moment.&lt;/h1&gt;

&lt;h1 id=&#34;projects-should-think-hard-about-each-dependency-they-bring-in-they-aren-t-free:50154871feb7734a0c128eea6d4c994c&#34;&gt;- Projects should think hard about each dependency they bring in &amp;ndash; they aren&amp;rsquo;t free&lt;/h1&gt;

&lt;h1 id=&#34;packages-developed-and-thrown-out-there-hoping-that-someone-else-will-use-and-popularise-them-as-peter-bourgon-noted-at-fosdem-this-year-does-go-really-need-another-http-mux:50154871feb7734a0c128eea6d4c994c&#34;&gt;- Packages developed and thrown out there, hoping that someone else will use and popularise them. As Peter Bourgon noted at FOSDEM this year, does Go really need another http mux ?&lt;/h1&gt;

&lt;h1 id=&#34;what-i-want-to-see-is-large-projects-being-built-with-go-then-when-they-are-proven-lets-circle-back-and-peal-off-parts-of-those-projects-that-are-reusable-but-that-happens-second-you-can-t-have-a-stable-complete-package-without-an-anchor-tenant-and-it-makes-sense-to-me-that-those-libraries-should-be-incubated-inside-their-host-not-along-side-them-it-worked-for-django-it-worked-for-rails-i-think-it-s-a-message-that-should-be-studied:50154871feb7734a0c128eea6d4c994c&#34;&gt;What I want to see is large projects being built with Go, then, when they are proven, lets circle back and peal off parts of those projects that are reusable. But that happens second, you can&amp;rsquo;t have a stable complete package without an anchor tenant, and it makes sense to me that those libraries should be incubated inside their host, not along side them &amp;ndash; it worked for django, it worked for rails, I think it&amp;rsquo;s a message that should be studied.&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Take aways&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem is &lt;code&gt;go&lt;/code&gt;get`, not the import statement.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;go&lt;/code&gt; tool doesn&amp;rsquo;t define the language, we can build a replacement.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Try it out&lt;/p&gt;

&lt;p&gt;go get github.com/constabulary/gb/&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;100 % compatible with existing Go source.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t even need to change &lt;code&gt;$GOPATH&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Upgrade to a gb project if you like.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reusable library for building Go packages, no more shelling out to &lt;code&gt;go&lt;/code&gt;build`&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a plugin, please write a plugin.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>